generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PrivacyLevel {
  private
  friends
  public
}

enum ProjectStatus {
  active
  paused
  completed
  archived
}

enum ProjectStage {
  idea
  planning
  development
  testing
  launch
  maintenance
}

enum EntryType {
  progress
  milestone
  note
  media
  link
}

enum MilestoneStatus {
  planned
  active
  completed
  skipped
}

model User {
  id            String       @id @default(cuid())
  username      String       @unique
  email         String?      @unique
  password      String
  name          String?
  emailVerified DateTime?
  image         String?
  location      String?
  privacy       PrivacyLevel @default(public)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  accounts Account[]
  sessions Session[]
  projects Project[]
  userPassions UserPassion[]
  entries Entry[]
  milestones Milestone[]
  tasks Task[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Passion {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  icon        String?
  color       String?
  isCustom    Boolean  @default(false)
  parentId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Self-referential relationship for hierarchical passions
  parent   Passion?  @relation("PassionHierarchy", fields: [parentId], references: [id])
  children Passion[] @relation("PassionHierarchy")

  // Many-to-many with users
  userPassions UserPassion[]
  projects     Project[]
}

model UserPassion {
  id        String   @id @default(cuid())
  userId    String
  passionId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  passion Passion @relation(fields: [passionId], references: [id], onDelete: Cascade)

  @@unique([userId, passionId])
}

model Project {
  id          String        @id @default(cuid())
  title       String
  description String?
  status      ProjectStatus @default(active)
  stage       ProjectStage  @default(idea)
  privacy     PrivacyLevel  @default(public)
  userId      String
  passionId   String
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  passion Passion @relation(fields: [passionId], references: [id], onDelete: Cascade)
  
  entries Entry[]
  milestones Milestone[]
  tasks Task[]

  @@index([userId, status])
  @@index([passionId])
}

model Entry {
  id          String      @id @default(cuid())
  title       String
  content     String?     // Rich text content
  type        EntryType   @default(progress)
  privacy     PrivacyLevel @default(public)
  userId      String
  projectId   String
  milestoneId String?     // Optional link to milestone
  
  // Media and links
  mediaUrls   String[]    // Array of media URLs
  links       String[]    // Array of external links
  tags        String[]    // Array of tags for categorization
  
  // Metadata
  publishedAt DateTime?   // Null for drafts
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  milestone Milestone? @relation(fields: [milestoneId], references: [id], onDelete: SetNull)

  @@index([projectId, publishedAt])
  @@index([userId, publishedAt])
  @@index([milestoneId])
}

model Milestone {
  id          String          @id @default(cuid())
  title       String
  description String?
  status      MilestoneStatus @default(planned)
  userId      String
  projectId   String
  
  // Ordering and dependencies
  order       Int             @default(0)
  parentId    String?         // For nested milestones
  
  // Timeline
  targetDate  DateTime?
  completedAt DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  // Self-referential for milestone hierarchy
  parent   Milestone?  @relation("MilestoneHierarchy", fields: [parentId], references: [id])
  children Milestone[] @relation("MilestoneHierarchy")
  
  entries Entry[]
  tasks   Task[]

  @@index([projectId, order])
  @@index([userId, status])
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  completed   Boolean  @default(false)
  userId      String
  projectId   String?  // Optional - can be standalone
  milestoneId String?  // Optional - can be unassigned
  
  // Ordering
  order       Int      @default(0)
  
  // Timeline
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project?   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  milestone Milestone? @relation(fields: [milestoneId], references: [id], onDelete: SetNull)

  @@index([userId, completed])
  @@index([projectId, order])
  @@index([milestoneId, order])
}
